------------------create secret-------------------------------------------
username: ecomuser
password: ecompassword
secret name: secret1
---------------------------------------------------------------------------
policy----policy1

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "VisualEditor0",
      "Effect": "Allow",
      "Action": [
        "secretsmanager:GetResourcePolicy",
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret",
        "secretsmanager:ListSecretVersionIds"
      ],
      "Resource": [
        "arn:aws:secretsmanager:us-east-1:[your-account-number]:secret:secret1"
      ]
    },
    {
      "Sid": "VisualEditor1",
      "Effect": "Allow",
      "Action": [
        "secretsmanager:GetRandomPassword",
        "secretsmanager:ListSecrets"
      ],
      "Resource": "*"
    }
  ]
}




role-----rds----add role database rds-----attach policy policy1--------rolename: rdsproxy-access-SM-RDS-role1

trust policy:

{
 "Version": "2012-10-17",
 "Statement": [
  {
   "Sid": "",
   "Effect": "Allow",
   "Principal": {
    "Service": "rds.amazonaws.com"
   },
   "Action": "sts:AssumeRole"
  }
 ]
}

----------------------------------------------------------------------------------------------------
lambda----function----python 3.8------function1----app.py

from mysql.connector import Error as mysql_error
import boto3
import logging
import mysql.connector
import os

logger = logging.getLogger()
logger.setLevel(logging.INFO)
logging.info('Generate database token...')

rds_client = boto3.client('rds')
database_token = rds_client.generate_db_auth_token(
    DBHostname=os.environ['DB_HOST'],
    Port=3306,
    DBUsername=os.environ['DB_USER'],
    Region=os.environ['AWS_REGION']
)

logging.info('Token successfully obtained. Connecting to database...')

database_connection = mysql.connector.connect(
    host=os.environ['DB_HOST'],
    port=3306,
    database=os.environ['DB_NAME'],
    user=os.environ['DB_USER'],
    password=database_token
)

logging.info('Connected!!')

def lambda_handler(event, context):
    db_cursor = database_connection.cursor(dictionary=True)
    query = "SELECT * FROM ecomdb LIMIT 10"
    db_cursor.execute(query)
    print(db_cursor.fetchall())


---------------------------------how to package   mysql-connector-python------------------------------------
case1:---To create the deployment package (project directory)

$mkdir my-function
$cd my-function
$ls
app.py
$mkdir package
$pip install --target ./package mysql-connector-python
$pip install --target ./package boto3
$cd package
$zip -r ../my_deployment_package.zip .
$cd ..
$zip my_deployment_package.zip app.py
$ls
my_deployment_package.zip    <-----all dependiemcies with app.py



case2:----To create the deployment package (virtual environment)

$mkdir my_function
$cd my_function
$ls
app.py
root@SDOP_Ts:~/my_function# python3.10 -m venv my_virtual_env
root@SDOP_Ts:~/my_function# ls
app.py  my_virtual_env

root@SDOP_Ts:~/my_function# source ./my_virtual_env/bin/activate
(my_virtual_env) root@SDOP_Ts:~/my_function#
(my_virtual_env) root@SDOP_Ts:~/my_function# pip install mysql-connector-python
(my_virtual_env) root@SDOP_Ts:~/my_function# pip show mysql-connector-python
Name: mysql-connector-python
Version: 8.1.0
Summary: MySQL driver written in Python
Home-page: http://dev.mysql.com/doc/connector-python/en/index.html
Author: Oracle and/or its affiliates
Author-email:
License: GNU GPLv2 (with FOSS License Exception)
Location: /root/my_function/my_virtual_env/lib/python3.10/site-packages  <------
Requires: protobuf
Required-by:

(my_virtual_env) root@SDOP_Ts:~/my_function# deactivate
root@SDOP_Ts:~/my_function#

root@SDOP_Ts:~/my_function# cd /root/my_function/my_virtual_env/lib/python3.10/site-packages  <---
root@SDOP_Ts:~/my_function/my_virtual_env/lib/python3.10/site-packages#

root@SDOP_Ts:~/my_function/my_virtual_env/lib/python3.10/site-packages# zip -r ../../../../my_deployment_package.zip .


root@SDOP_Ts:~/my_function/my_virtual_env/lib/python3.10/site-packages# cd ../../../../   <----parent dir
root@SDOP_Ts:~/my_function#


root@SDOP_Ts:~/my_function# zip my_deployment_package.zip app.py
  adding: app.py (deflated 51%)
root@SDOP_Ts:~/my_function# ls
app.py  my_deployment_package.zip  my_virtual_env
-----------------------------------------------------------------------------------------------------
policy----policy2   (for *  use can  db-FLVJNWOVQAPL3AOQYW3LACCMUA )
[ec2-user@ip-172-31-4-143 ~]$ aws rds describe-db-instances --query "DBInstances[*].[DBInstanceIdentifier,DbiResourceId]"
[
    [
        "ecomdb", 
        "db-FLVJNWOVQAPL3AOQYW3LACCMUA"
    ]
]




{
   "Version": "2012-10-17",
   "Statement": [
      {
         "Effect": "Allow",
         "Action": [
             "rds-db:connect"
         ],
         "Resource": [
             "arn:aws:rds-db:us-east-2:1234567890:dbuser:*/ecomuser"
         ]
      }
   ]
}


role-----lambda-----policy2--------lambda-access-rds-role2
----------------------------------------------------------------------------------------------------------------
